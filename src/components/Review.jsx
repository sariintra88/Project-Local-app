import './Review.css';
import React, { useState, useRef } from 'react';
import axios from 'axios';

const API_BASE_URL = 'http://localhost:5001';

const ReviewModal = ({ onClose, templeId, templeName, onSubmitSuccess }) => {
  const [rating, setRating] = useState(0);
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [visitDuration, setVisitDuration] = useState('');
  const [activities, setActivities] = useState('');
  const [selectedImages, setSelectedImages] = useState([]);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const fileInputRef = useRef();

  const handleImageUpload = (event) => {
    const files = Array.from(event.target.files);
    const totalFiles = selectedImages.length + files.length;

    if (totalFiles > 5) {
      alert('‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏π‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      event.target.value = ""; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
      return;
    }

    // Update selected images
    setSelectedImages(prevImages => [...prevImages, ...files]);
  };

  const handleRemoveImage = (indexToRemove) => {
    setSelectedImages(prevImages => 
      prevImages.filter((_, index) => index !== indexToRemove)
    );
  };

  const handleSubmitReview = async (e) => {
    e.preventDefault();
    
    // Validation
    if (rating === 0) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏≤‡∏ß');
      return;
    }
    
    if (!content.trim()) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß');
      return;
    }

    try {
      setSubmitting(true);
      setError(null);
      
      // Create form data for multipart/form-data (for image uploads)
      const formData = new FormData();
      formData.append('templeId', templeId);
      formData.append('rating', rating);
      formData.append('title', title);
      formData.append('content', content);
      formData.append('visitDuration', visitDuration);
      formData.append('activities', activities);
      
      // Append each image to the form data
      selectedImages.forEach(image => {
        formData.append('images', image);
      });
      
      // API call to submit the review
      await axios.post(`${API_BASE_URL}/api/reviews`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      
      // Call success callback to refresh reviews
      if (onSubmitSuccess) {
        onSubmitSuccess();
      }
    } catch (err) {
      console.error('Error submitting review:', err);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="review-modal-overlay">
      <div className="review-modal">
        <h2>‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß - {templeName}</h2>

        {error && (
          <div className="review-error">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmitReview}>
          {/* üîπ ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏≤‡∏ß */}
          <div className="rating-stars">
            {[1, 2, 3, 4, 5].map((star) => (
              <span
                key={star}
                className={`star ${rating >= star ? "selected" : ""}`}
                onClick={() => setRating(star)}
              >
                ‚òÖ
              </span>
            ))}
          </div>

          {/* 2. ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á */}
          <div className="review-section">
            <label>‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</label>
            <input 
              type="text" 
              maxLength={120} 
              placeholder="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏µ‡∏ß‡∏¥‡∏ß" 
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          {/* 3. ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
          <div className="review-section">
            <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß <span className="required">*</span></label>
            <textarea 
              rows={4} 
              placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô"
              value={content}
              onChange={(e) => setContent(e.target.value)}
              required
            ></textarea>
          </div>

          {/* 4. ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ */}
          <div className="review-section">
            <label>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ</label>
            <input 
              type="text" 
              placeholder="‡πÄ‡∏ä‡πà‡∏ô 1 - 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô, ‡∏ï‡∏•‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô"
              value={visitDuration}
              onChange={(e) => setVisitDuration(e.target.value)}
            />
          </div>

          {/* 5. ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥ */}
          <div className="review-section">
            <label>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ</label>
            <input 
              type="text" 
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏´‡∏ß‡πâ‡∏û‡∏£‡∏∞, ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ, ‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç"
              value={activities}
              onChange={(e) => setActivities(e.target.value)}
            />
          </div>

          {/* 6. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ */}
          <div className="review-section">
            <label htmlFor="images">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏π‡∏õ)</label>
            <input
              type="file"
              id="images"
              multiple
              accept="image/*"
              onChange={handleImageUpload}
              ref={fileInputRef}
            />
            {selectedImages.length > 0 && (
              <div className="preview-container">
                {selectedImages.map((file, index) => (
                  <div key={index} className="image-preview">
                    <img src={URL.createObjectURL(file)} alt={`preview-${index}`} />
                    <button 
                      type="button" 
                      className="remove-image" 
                      onClick={() => handleRemoveImage(index)}
                    >
                      √ó
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* 7. ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å */}
          <div className="review-buttons">
            <button 
              type="submit" 
              className="action-btn primary"
              disabled={submitting}
            >
              {submitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'}
            </button>
            <button 
              type="button" 
              className="action-btn cancel" 
              onClick={onClose}
              disabled={submitting}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ReviewModal;